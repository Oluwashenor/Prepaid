@page "/"

<!-- Global Container -->
<div class="flex items-center justify-center min-h-screen">
    <!-- Card Container -->
    <div class="flex relative mt-4 h-100 md:w-full md:w-auto mx-1 lg:w-auto justify-center bg-white shadow-md rounded-2xl">
        <div class="absolute -top-7 flex items-center justify-center text-white font-bold w-[92%] h-[4rem] rounded-xl" style="background-color:#FCB713;">
            Sign in
        </div>

        <div class="flex justify-center mt-2 px-3 md:px-6 pt-16 pb-4 w-full">
            <!-- Content Container -->
            <EditForm Model="Input" OnValidSubmit="HandleLogin" FormName="Login">
            <div class="flex flex-col mx-1 w-full md:w-[300px] 2xl:w-[360px] space-y-4">
               
                    <div class="row">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                    </div>
                    <div class="flex w-auto">
                        <InputNumber @bind-Value="Input.ClientId" type="number"
                               class="w-full focus:outline-[#E91E63] py-2 px-2.5 border border-gray-500 rounded-md placeholder:font-sans placeholder:font-normal"
                               placeholder="Client ID"  />
                    </div>

                    <div class="flex">
                        <InputText @bind-Value="Input.Phone" type="number"
                               class="w-full focus:outline-[#E91E63] py-2 px-2.5 border border-gray-500 rounded-md placeholder:font-sans placeholder:font-normal"
                               placeholder="Phone Number" />
                    </div>

                    <div class="flex">
                        <InputText @bind-Value="Input.Password" type="password"
                               class="w-full focus:outline-[#E91E63] py-2 px-2.5 border border-gray-500 rounded-md placeholder:font-sans placeholder:font-normal"
                               placeholder="Password" />
                    </div>
                    <div class="flex space-x-2 items-center">
                        <label class="relative flex justify-between items-center group text-xl">
                            <input type="checkbox" class="absolute left-1/2 -translate-x-1/2 w-full h-full peer appearance-none rounded-md" />
                            <span class="w-9 h-4 flex items-center flex-shrink-0 bg-gray-300 rounded-full duration-300 ease-in-out peer-checked:bg-[#42424A] after:w-5 after:h-5 after:bg-white after:rounded-full after:shadow-md after:duration-300 peer-checked:after:translate-x-6 group-hover:after:translate-x-1"></span>
                            <span class="ms-3 text-sm font-medium text-gray-400 dark:text-gray-400">Remember me</span>
                        </label>
                    </div>
                    <div>
                        <button type="submit" class="w-full h-[2.5rem] mt-3 rounded-[8px] text-white font-bold text-xs" style="background-color:#FCB713;">SIGN IN</button>
                    </div>
                    @if (ErrorMessage != null)
                    {
                            <span class="text-red-600 text-xs">@ErrorMessage</span>
                    }

                <!-- Bottom Content -->
                <div class="flex space-x-2 items-center justify-center">
                    <p class="py-6 text-sm font-thin text-center text-gray-400">
                        Don't have an account?
                    </p>
                    <span style="color:#FCB713;"> <a href="#">Sign up</a> </span>
                </div>

            </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginDTO? Input { get; set; } = new();
    string? ErrorMessage;

    private async void HandleLogin()
    {
        ErrorMessage = string.Empty;
        try
        {
            var signIn = await apiClient.LoginAsync(Input);
            if (signIn.Status)
            {
                NavManager.NavigateTo("/dashboard", forceLoad: true);
            }
            else
            {
                ErrorMessage = signIn.Message;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
}